/* Daniel Perry
 * Spring 05 - for cs6620
 * ray tracer - started 24 Jan 05
 *
 */

#include <iostream>
#include <vector>

#include "gl/hpoint.h"
#include "gl/image.h"
#include "gl/ray.h"
#include "gl/rgb.h"
#include "gl/vector3d.h"
//#include "gl/sphere.h"
//#include "gl/surface.h"

#include "gl/Scene.h"
#include "gl/Sphere.h"
#include "gl/LambertianMaterial.h"
#include "gl/Camera.h"
#include "gl/Light.h"
#include "gl/DirectionalLight.h"
#include "gl/PointLight.h"
#include "gl/ConstantBackground.h"
#include "gl/PinholeCamera.h"
#include "gl/Background.h"
#include "gl/Object.h"
#include "gl/Material.h"
#include "gl/Group.h"
#include "gl/Plane.h"

#include "Time.h"
#include "gl/util.h"
using namespace std;

int main(int args, char * argv)
{
  Time time;
  time.initialize();
  double setupt,render,finalize;

  int yres=512,xres=512;
  
  
  image THEIMAGE(xres,yres);

  Group gr;
  LambertianMaterial * matl;
  Sphere * sph;
  double yt=6,xt=4,tmp;
  int numSpheres = 15;
  for( int yo=1; yo < numSpheres+1 ; yo++){
    matl = new LambertianMaterial(rgb(yo/(numSpheres*1.),1-(yo/(numSpheres*1.)),.5),.6,.4);
    sph = new Sphere( vector3d(xt,yt,20) , .4, matl );
    tmp = yo/(numSpheres*1.);
    xt+=-.5*(1./numSpheres);
    yt+=.85*tmp;
    gr.add( sph );
  }
  xt = 4;
  for( int yo=numSpheres; yo>0 ; yo--){
    matl = new LambertianMaterial(rgb(yo/(numSpheres*1.),1-(yo/(numSpheres*1.)),.5),.6,.4);
    sph = new Sphere( vector3d(xt,yt,20) , .4, matl );
    tmp = yo/(numSpheres*1.);
    xt+=-tmp;
    yt+=-tmp;
    gr.add( sph );
  }

  for( int yo=1; yo < numSpheres+1 ; yo++){
    matl = new LambertianMaterial(rgb(yo/(numSpheres*1.),1-(yo/(numSpheres*1.)),.5),.6,.4);
    sph = new Sphere( vector3d(xt,yt,20) , .4, matl );
    tmp = yo/(numSpheres*1.);
    xt+=-.5*(1./numSpheres);
    yt+=.85*tmp;
    gr.add( sph );
  }



  LambertianMaterial lm4( rgb(.8,.8,.8) , .6 , .4 );
  Plane plane( vector3d(0,1,0) , vector3d(0,-.1,0) , &lm4);

  gr.add(& plane);

  PinholeCamera cam( hpoint( 0,10,0,0), hpoint( 0,10,1) , vector3d(0,1,0), 0.52359878 , 1 );

  vector<Light *> lights;
  PointLight pl(rgb(.9,.9,.9),vector3d(20,30,100));
  //PointLight pl1(rgb(.3,.1,.1),vector3d(-40,-30,50));
  PointLight pl2( rgb(.9,.9,.9),vector3d(0,25,20));
  lights.push_back( &pl );
  //lights.push_back( &pl1 );
  lights.push_back( &pl2 );

  ConstantBackground bg( rgb(.1,.2,.3) );
  
  Scene scene( &gr , &cam, lights, rgb( .4 , .4 , .4) , & bg );

  HitRecord hit;
  RenderContext rc(scene);

  setupt = time.currentSeconds();

  for( int i=0; i<xres; i++ ){
    for(int j=0; j<yres; j++){
      double x = 2 * (i-xres/2. + .5 ) / xres;
      double y = 2 * (j-yres/2. + .5 ) / yres;
      ray r;
      rgb clr;
      scene.camera->makeRay( r , rc , x , y );
      hit.t = MYMAX;
      if(scene.object->intersect( hit , rc , r )){
	hit.material->shade( clr , rc , r , hit , 0 );
      }else{
	scene.background->getBackgroundColor( clr , rc , r );
      }
      THEIMAGE.set( i , j , clr );
    }
  }
  
  render = time.currentSeconds();

  THEIMAGE.writeppm( cout );
  
  finalize = time.currentSeconds();

  finalize -= (setupt+render);
  render -= setupt;

  cerr<<"setup: "<<setupt<<"\nrender: "<<render<<"\nfinalize: "<<finalize<<endl;

  return 0;
}
