/* Daniel Perry
 * Spring 05 - for cs6620
 * ray tracer - started 24 Jan 05
 *
 */

#include <iostream>
#include <vector>

#include "gl/hpoint.h"
#include "gl/image.h"
#include "gl/ray.h"
#include "gl/rgb.h"
#include "gl/vector3d.h"
//#include "gl/sphere.h"
//#include "gl/surface.h"

#include "gl/Scene.h"
#include "gl/Sphere.h"
#include "gl/Triangle.h"
#include "gl/Disk.h"
#include "gl/Ring.h"
#include "gl/AxisBox.h"
#include "gl/HeightField.h"
#include "gl/LambertianMaterial.h"
#include "gl/Camera.h"
#include "gl/Light.h"
#include "gl/DirectionalLight.h"
#include "gl/PointLight.h"
#include "gl/ConstantBackground.h"
#include "gl/PinholeCamera.h"
#include "gl/Background.h"
#include "gl/Object.h"
#include "gl/Material.h"
#include "gl/Group.h"
#include "gl/Plane.h"

#include "gl/Time.h"
#include "gl/util.h"

using namespace std;
#include <fstream>

int main(int args, char * argv[] )
{

  if( args != 2 ){
    cerr<<"usage: "<<argv[0]<<" outfilename"<<endl;
    exit(1);
  }

  ofstream out(argv[1]);

  if(!out){
    cerr<<"Couldn't open "<<argv[1]<<endl;
    exit(1);
  }

  Time time;
  time.initialize();
  double setupt,render,finalize;

  int yres=512,xres=512;
  
  
  image THEIMAGE(xres,yres);

  Group world;//gr
  

  Material* boxmatl = new LambertianMaterial(rgb(.8, .4, .4), .6, .4);
  world.add(new AxisBox(vector3d(-4, -4, -0), vector3d(4,4,2),boxmatl));

  Material* ringmatl = new LambertianMaterial(rgb(.6, .6, .9), .6, .4);
  world.add(new Ring(vector3d(-2, 0, 4), vector3d(3, -1, 2), 1.2, 1.8,ringmatl));

  Material* trimatl = new LambertianMaterial(rgb(.6, .9, .6), .6, .4);
  world.add(new Triangle(vector3d(1,1,2), vector3d(3,1,3), vector3d(2, 2, 6),trimatl));

  Material* spherematl = new LambertianMaterial(rgb(.3, .3, .3), .8, .2);
  world.add(new Sphere(vector3d(-3.3, -3.3, 2.5), .5,spherematl));

  Material* hfmatl = new LambertianMaterial(rgb(1, 1, 0), .8, .2);
  world.add(new HeightField(vector3d(0, -3, 2), vector3d(3, 0, 4),"hfield.200x200",hfmatl));

  PinholeCamera cam( hpoint( 6,-18,8.5), hpoint( -.5,0,2.5) , vector3d(0,0,1), M_PI/180*30, 1 );

  vector<Light *> lights;
  
  PointLight pl(rgb(.9,.9,.9),vector3d(20,30,100));
  lights.push_back( &pl );
  
  PointLight pl2( rgb(.3,.1,.1),vector3d(-40,-30,50));
  lights.push_back( &pl2 );
  

  ConstantBackground bg( rgb(.1,.2,.3) );
  
  Scene scene( &world , &cam, lights, rgb( .4 , .4 , .4) , & bg );

  HitRecord hit;
  RenderContext rc(scene);

  setupt = time.currentSeconds();

  for( int i=0; i<xres; i++ ){
    for(int j=0; j<yres; j++){
      double x = 2 * (i-xres/2. + .5 ) / xres;
      double y = 2 * (j-yres/2. + .5 ) / yres;
      ray r;
      rgb clr;
      scene.camera->makeRay( r , rc , x , y );
      hit.t = MYMAX;
      if(scene.object->intersect( hit , rc , r )){
	hit.material->shade( clr , rc , r , hit , 0 );
      }else{
	scene.background->getBackgroundColor( clr , rc , r );
      }
      THEIMAGE.set( i , j , clr );
    }
  }
  
  render = time.currentSeconds();

  THEIMAGE.writeppm( out );
  
  finalize = time.currentSeconds();

  finalize -= (setupt+render);
  render -= setupt;

  cerr<<"setup: "<<setupt<<"\nrender: "<<render<<"\nfinalize: "<<finalize<<endl;

  return 0;
}
